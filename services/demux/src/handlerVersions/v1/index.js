const chalk = require('chalk')
const massive = require('massive')

const { DB_NAME, DB_USER, DB_HOST, DB_PORT, DB_PASSWORD } = process.env

const massiveConfig = {
  host: DB_HOST || '127.0.0.1',
  port: DB_PORT || 5432,
  database: DB_NAME || 'eosrate',
  user: DB_USER || 'user',
  password: DB_PASSWORD || 'pass'
}

console.log('==== massiveConfig ====')
console.log(massiveConfig)

const logUpdate = (payload, blockInfo, context) => {
  console.log('============= logUpdate =================')
  console.info('State updated:\n', JSON.stringify({ payload, blockInfo, context }, null, 2))
}

const updateProducerRatings = (payload, blockInfo, context) => {
  console.log('============= updateProducerRatings =================')
  console.info('State updated:\n', JSON.stringify({ payload, blockInfo, context }, null, 2))
  massive(massiveConfig).then(db => {
    const { user, bp, ratings_json: ratingsJSON } = blockInfo.data
    const ratingsObject = {
      account: user,
      bp,
      ratings: JSON.parse(ratingsJSON)
    }

    // Upsert only works with autogenerated keys
    // https://github.com/dmfay/massive-js/issues/533
    // db.producer_ratings.save(ratingsObject,
    //   function(err, res) {
    //     if(err){
    //       console.log(chalk.red(" (╯°□°）╯︵ ┻━┻ \n"))
    //       console.log(err)
    //       reuturn;
    //     }
    //     console.log(chalk.green("\n┏(-_-)┛┗(-_-)┓┗(-_-)┛┏(-_-)┓\n"));
    //     console.log(chalk.green("\nPOSTGRES UPDATED!!\n"));
    //   });

    db.producer_ratings.insert(ratingsObject, function (err, res) {
      if (err) {
        console.log(chalk.red(' (╯°□°）╯︵ ┻━┻ \n'))
        console.log(err)
        return
      }
      console.log(chalk.green('\n┏(-_-)┛┗(-_-﻿ )┓┗(-_-)┛┏(-_-)┓\n'))
      console.log(chalk.green('\nPOSTGRES UPDATED!!\n'))
    })
  })
}

const updaters = [
  {
    actionType: 'eoseosrateio::rateproducer',
    apply: updateProducerRatings
  }
]

const effects = [
  {
    actionType: 'eoseosrateio::rateproducer',
    run: logUpdate
  }
]

const handlerVersion = {
  versionName: 'v1',
  updaters,
  effects
}

module.exports = handlerVersion
